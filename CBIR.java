/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cbir;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.opencv.core.Core;

/**
 *
 * @author parthJaradi
 */
public class query_image1 extends javax.swing.JFrame {

    public static int ROW = 112;
    public static int COL = 10000;
    private final int NO_OF_IMAGES = 14;
    private final int NO_OF_IMAGES_IN_CLASS = 7;
    private final int RES = 10000;
    private final String[][][] data_array;
    private final String[][][] data_array_centre;
    private int[][] query_array;
    int difference[];
    private final int K = 5;
    final int NO_OF_CLASSES = 2;
    int histogram[];
    int temp_diff_sort[];
    int hist_temp_sort[];
    int k_mean_centre[][];
    int CLOSEST_CLASS;

    /**
     * Creates new form cbirJFrame
     */
    public query_image1() {
        initComponents();

        data_array = new String[NO_OF_IMAGES][8][RES];
        data_array_centre = new String[NO_OF_IMAGES][8][RES];
        query_array = new int[8][RES];
        difference = new int[NO_OF_IMAGES];
        histogram = new int[5 * NO_OF_CLASSES];
        temp_diff_sort = new int[NO_OF_IMAGES];
        hist_temp_sort = new int[NO_OF_IMAGES];
        k_mean_centre = new int[8 * NO_OF_IMAGES_IN_CLASS][5 * NO_OF_CLASSES];
    }

    private ImageIcon ImageIcon(BufferedImage dimg) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static class CustomFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".jpg") || file.getAbsolutePath().endsWith(".png") || file.getAbsolutePath().endsWith(".gif");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "(*.JPG,*.png,*.gif)";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        FileChooser.setDialogTitle("Choose Image File");
        FileChooser.setFileFilter(new CustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setText("Please select the file");

        jTextField1.setText("Image Path");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Query Image");

        jLabel3.setText("Image 1");

        jLabel4.setText("Image 2");

        jLabel5.setText("Image 3");

        jLabel6.setText("Image 4");

        jLabel7.setText("Image 5");

        jButton2.setText("Process");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Similar Images");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(183, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(135, 135, 135))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addGap(34, 34, 34)
                .addComponent(jLabel8)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addContainerGap(190, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = FileChooser.getSelectedFile();
            if ((file.getAbsolutePath().endsWith(".jpg")) || (file.getAbsolutePath().endsWith(".png")) || (file.getAbsolutePath().endsWith(".gif")) || (file.getAbsolutePath().endsWith(".JPG"))) {
                globalImage = new ImageIcon(file.getAbsolutePath());

                try {
                    originalImage = ImageIO.read(new File(file.getAbsolutePath()));
                    int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

                    resizeImagePng = resizeImage(originalImage, type);
                    globalImage = new ImageIcon(resizeImagePng);

                    BufferedImage greyImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
                    resizeImagePngGray = resizeImage(greyImage, type);
                } catch (IOException ex) {
                    Logger.getLogger(query_image1.class.getName()).log(Level.SEVERE, null, ex);
                }
                //Another way to read image
                //Another way to read image

                File file1 = new File(file.getAbsolutePath());
                BufferedImage image1 = null;
                try {
                    image1 = ImageIO.read(file1);
                } catch (IOException ex) {
                    Logger.getLogger(query_image1.class.getName()).log(Level.SEVERE, null, ex);
                }

                //write file
              /*  FileWriter fstream = null;
                 try {
                 fstream = new FileWriter("E:\\Wood11test.txt");
                 } catch (IOException ex) {
                 Logger.getLogger(query_image.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 BufferedWriter out = new BufferedWriter(fstream);*/
                int red, green, blue;
                int i;
                int c1, c2, c3, c4, c5, c6, c7, c8;

                int iH = resizeImagePng.getHeight();
                int iW = resizeImagePng.getWidth();

                iW -= 1;
                iH -= 1;

                int x, y;

                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                ColorConvertOp op = new ColorConvertOp(cs, null);

                resizeImagePngGray = op.filter(resizeImagePng, null);
                //  globalImage = new ImageIcon(resizeImagePngGray);

                int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
                displayImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
                displayImage = resizeQueryImage(originalImage, type);

                globalImage = new ImageIcon(displayImage);

                System.out.println(iH + "\n" + iW + "\n");

                int k = 0;
                for (y = 1; y < iH; y++) {
                    for (x = 1; x < iW; x++, k++) {
                        c1 = resizeImagePngGray.getRGB(x - 1, y - 1);
                        red = (c1 & 0x00ff0000) >> 16;
                        query_array[0][k] = red;
                        //   System.out.println(red +"\n");

                        c2 = resizeImagePngGray.getRGB(x - 1, y);
                        red = (c2 & 0x00ff0000) >> 16;
                        query_array[1][k] = red;
                        //  System.out.println(red +"\n");

                        c3 = resizeImagePngGray.getRGB(x - 1, y + 1);
                        red = (c3 & 0x00ff0000) >> 16;
                        query_array[2][k] = red;
                        //  System.out.println(red +"\n");

                        c4 = resizeImagePngGray.getRGB(x, y + 1);
                        red = (c4 & 0x00ff0000) >> 16;
                        query_array[3][k] = red;
                        //   System.out.println(red +"\n");

                        c5 = resizeImagePngGray.getRGB(x + 1, y + 1);
                        red = (c5 & 0x00ff0000) >> 16;
                        query_array[4][k] = red;
                        //   System.out.println(red +"\n");

                        c6 = resizeImagePngGray.getRGB(x + 1, y);
                        red = (c6 & 0x00ff0000) >> 16;
                        query_array[5][k] = red;
                        //   System.out.println(red +"\n");

                        c7 = resizeImagePngGray.getRGB(x + 1, y - 1);
                        red = (c7 & 0x00ff0000) >> 16;
                        query_array[6][k] = red;
                        //   System.out.println(red +"\n");

                        c8 = resizeImagePngGray.getRGB(x - 1, y);
                        red = (c8 & 0x00ff0000) >> 16;
                        query_array[7][k] = red;
                        //   System.out.println(red +"\n");
                    }
                }

                //enter values in csv
                String outputFile = "query.csv";
                //boolean alreadyExists = new File(outputFile).exists();

                try {
                    // use FileWriter constructor that specifies open for appending
                    CSVWriter csvOutput = new CSVWriter(new FileWriter(outputFile, true), ',');

                    String record[] = new String[10000];
                    if (true) {
                        for (int j = 0; j < 8; j++) {
                            for (int q = 0; q < 10000; q++) {
                                record[q] = String.valueOf(query_array[j][q]);
                                //System.out.println(pixel_value[j][q]);
                            }
                            csvOutput.writeNext(record);
                        }
                    }
			// else assume that the file already has the correct header line

                    // write out a few records
                    csvOutput.close();
                    System.out.println("Comp");
                } catch (IOException e) {
                    e.printStackTrace();
                }

                jTextField1.setText(file.getAbsolutePath());
                jLabel2.setIcon(globalImage);
                jLabel2.setText("");

                //  jLabel2.setSize(globalImage.getIconWidth(), globalImage.getIconHeight());
            }

        } else {
            //jTextField1.setText("Select the valid image file");
            JOptionPane.showMessageDialog(null, "Select Valid File", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private static BufferedImage resizeImage(BufferedImage originalImage, int type) {
        BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
        g.dispose();

        return resizedImage;
    }

    private static BufferedImage resizeQueryImage(BufferedImage originalImage, int type) {
        BufferedImage resizedImage = new BufferedImage(380, 275, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, 380, 275, null);
        g.dispose();

        return resizedImage;
    }

    private static BufferedImage resizeSimilarImage(BufferedImage originalImage, int type) {
        BufferedImage resizedImage = new BufferedImage(240, 200, type);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, 240, 200, null);
        g.dispose();

        return resizedImage;
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        //retrieving values from file
        String strFile = "C:\\Users\\jinkal\\Desktop\\Latest\\database.csv";

        histogram = new int[NO_OF_IMAGES];
        hist_temp_sort = new int[NO_OF_IMAGES];
        try {

            CSVReader reader = new CSVReader(new FileReader(strFile));

            for (int p = 0; p < NO_OF_IMAGES; p++) {
                for (int q = 0; q < 8; q++) {
                    data_array[p][q] = reader.readNext();
                    data_array_centre[p][q] = data_array[p][q];
                }
            }

            System.out.println("data[4][2][2]: " + data_array[4][2][100]);

            // data_array[p][q][r] : p- image number  : q- index number  : r- column number
            // >>>>>    k means   <<<<<<<
            int kmi, kmj;
            int r1 = 50, r2 = 100, r3 = 150, r4 = 200, r5 = 250;

            int cm1 = 0, cm2 = 0, cm3 = 0, cm4 = 0, cm5 = 0;
            int i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;

            // ac stores the column numbers for each cluster
            int[] ac1 = new int[10000];
            int[] ac2 = new int[10000];
            int[] ac3 = new int[10000];
            int[] ac4 = new int[10000];
            int[] ac5 = new int[10000];

            // ra stores the rows after k means
            int[][] ra1 = new int[NO_OF_IMAGES][8];
            int[][] ra2 = new int[NO_OF_IMAGES][8];
            int[][] ra3 = new int[NO_OF_IMAGES][8];
            int[][] ra4 = new int[NO_OF_IMAGES][8];
            int[][] ra5 = new int[NO_OF_IMAGES][8];

            int kmp, kmq, kmr;
            int d1, d2, d3, d4, d5;
            int min;
            int c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0;

            for (kmi = 0; kmi < 100; kmi++) {

                i1 = 0;
                i2 = 0;
                i3 = 0;
                i4 = 0;
                i5 = 0;
                for (kmr = 0; kmr < 10000; kmr++) {
                    for (kmp = 0; kmp < NO_OF_IMAGES; kmp++) {
                        for (kmq = 0; kmq < 8; kmq++) {

                            // finding the difference 
                            //random 1
                            d1 = (Integer.valueOf(data_array_centre[kmp][kmq][r1]) - Integer.valueOf(data_array[kmp][kmq][kmr]));
                            d1 = d1 * d1;
                            cm1 = cm1 + d1;

                            //random 2
                            d2 = (Integer.valueOf(data_array_centre[kmp][kmq][r2]) - Integer.valueOf(data_array[kmp][kmq][kmr]));
                            d2 = d2 * d2;
                            cm2 = cm2 + d2;

                            //random 3
                            d3 = (Integer.valueOf(data_array_centre[kmp][kmq][r3]) - Integer.valueOf(data_array[kmp][kmq][kmr]));
                            d3 = d3 * d3;
                            cm3 = cm3 + d3;

                            //random 4
                            d4 = (Integer.valueOf(data_array_centre[kmp][kmq][r4]) - Integer.valueOf(data_array[kmp][kmq][kmr]));
                            d4 = d4 * d4;
                            cm4 = cm4 + d4;

                            //random 5
                            d5 = (Integer.valueOf(data_array_centre[kmp][kmq][r5]) - Integer.valueOf(data_array[kmp][kmq][kmr]));
                            d5 = d5 * d5;
                            cm5 = cm5 + d5;

                        }
                    }

                    // mean 1
                    double dt1 = Math.sqrt(cm1);
                    cm1 = (int) dt1;

                    //mean 2
                    double dt2 = Math.sqrt(cm2);
                    cm2 = (int) dt2;

                    // mean 3
                    double dt3 = Math.sqrt(cm3);
                    cm3 = (int) dt3;

                    // mean 4
                    double dt4 = Math.sqrt(cm4);
                    cm4 = (int) dt4;

                    //mean 5
                    double dt5 = Math.sqrt(cm5);
                    cm5 = (int) dt5;

                    // finding the cluster to which its nearest
                    min = Math.min(cm1, cm2);

                    min = Math.min(min, cm3);

                    min = Math.min(min, cm4);

                    min = Math.min(min, cm5);

                    // storing the column number in the array
                    if (min == cm1) {
                        ac1[i1] = kmr;
                        i1++;
                    } else if (min == cm2) {
                        ac2[i2] = kmr;
                        i2++;
                    } else if (min == cm3) {
                        ac3[i3] = kmr;
                        i3++;
                    } else if (min == cm4) {
                        ac4[i4] = kmr;
                        i4++;
                    } else {
                        ac5[i5] = kmr;
                        i5++;
                    }

                }

                //update the 5 centre
                int ii, jj, k1, k2, k3, k4, k5;
                int sum1 = 0, avg1, sum2 = 0, avg2, sum3 = 0, avg3, sum4 = 0, avg4, sum5 = 0, avg5;

                // taking average of all the clusters
                try {
                    for (ii = 0; ii < NO_OF_IMAGES; ii++) {
                        for (jj = 0; jj < 8; jj++) {
                            //cluster 1
                            for (k1 = 0; k1 < i1; k1++) {
                                sum1 = sum1 + Integer.valueOf(data_array[ii][jj][ac1[k1]]);
                            }
                            avg1 = sum1 / i1;
                            ra1[ii][jj] = avg1;
                            data_array_centre[ii][jj][r1] = String.valueOf(avg1);

                            k_mean_centre[ii * 8 + jj][0] = avg1;
                      //  System.out.print(avg1);
                            //System.out.print("\n");
                            sum1 = 0;

                            //cluster 2
                            for (k2 = 0; k2 < i2; k2++) {
                                sum2 = sum2 + Integer.valueOf(data_array[ii][jj][ac2[k2]]);
                            }
                            avg2 = sum2 / i2;
                            ra2[ii][jj] = avg2;
                            data_array_centre[ii][jj][r2] = String.valueOf(avg2);
                            k_mean_centre[ii * 8 + jj][1] = avg2;
                            sum2 = 0;

                            //cluster 3
                            for (k3 = 0; k3 < i3; k3++) {
                                sum3 = sum3 + Integer.valueOf(data_array[ii][jj][ac3[k3]]);
                            }
                            avg3 = sum3 / i3;
                            ra3[ii][jj] = avg3;
                            data_array_centre[ii][jj][r3] = String.valueOf(avg3);
                            k_mean_centre[ii * 8 + jj][2] = avg3;
                            sum3 = 0;

                            //cluster 4
                            for (k4 = 0; k4 < i4; k4++) {
                                sum4 = sum4 + Integer.valueOf(data_array[ii][jj][ac4[k4]]);
                            }
                            avg4 = sum4 / i4;
                            ra4[ii][jj] = avg4;
                            data_array_centre[ii][jj][r4] = String.valueOf(avg4);
                            k_mean_centre[ii * 8 + jj][3] = avg4;
                            sum4 = 0;

                            //cluster 5
                            for (k5 = 0; k5 < i5; k5++) {
                                sum5 = sum5 + Integer.valueOf(data_array[ii][jj][ac5[k5]]);
                            }
                            avg5 = sum5 / i5;
                            ra5[ii][jj] = avg5;
                            data_array_centre[ii][jj][r5] = String.valueOf(avg5);
                            k_mean_centre[ii * 8 + jj][4] = avg5;
                            sum5 = 0;
                        }
                    }
                } catch (Exception e) {
                    System.out.print("Error in k means");

                }
            }
            /*
             int i,j,k,l,minTemp=255;
             d1=0;
             for(i=0;i<10000;i++)
             {
             for(j=0;j<NO_OF_IMAGES;j++)
             {
             for(k=0;k<8;k++)
             {
             d1 = Integer.valueOf(ra1[j][k])-Integer.valueOf(query_array[k][i]);
             d1 = d1 * d1;
             cm1 = cm1 + d1;
             }
             double dt1 = Math.sqrt(cm1);
             cm1 = (int) dt1;
             minTemp=Math.min(minTemp,cm1);
                    
             }
             }
            
             */

            //
            //Query
            try {
                for (int a = 0; a < RES; a++) {
                // difference = new int[NO_OF_IMAGES];
                    //temp_diff_sort = new int[NO_OF_IMAGES];
                    int min_cum_diff = 10000000;
                    int min_diff_col = 0;
                    for (int e = 0; e < NO_OF_CLASSES; e++) {
                        for (int d = 0; d < K; d++) {
                            for (int b = 0; b < NO_OF_IMAGES_IN_CLASS; b++) {

                                int cum_diff = 0;
                                for (int c = 0; c < 8; c++) {
                                    cum_diff += Math.abs(query_array[c][a] - k_mean_centre[b * 8 + c][e * 5 + d]);
                                }

                                if (cum_diff < min_cum_diff) {
                                    min_cum_diff = cum_diff;
                                    min_diff_col = d;
                                    CLOSEST_CLASS = e;

                                }
                            }
                        }

                    }

                    //Making histogram
                    histogram[CLOSEST_CLASS * 5 + min_diff_col]++;

                }
            } catch (Exception e) {
                System.out.print("Error in qyery");
            }
            //Completed Histogram before
            for (int i = 0; i < NO_OF_CLASSES * 5; i++) {
                System.out.println("hist " + (i + 1) + ": " + histogram[i]);
            }

            /* Arrays.sort(hist_temp_sort);

             for (int i = 0, c = 1; i < K; i++) {
             for (int j = 0; j < NO_OF_IMAGES; j++) {
             if (hist_temp_sort[i] == histogram[j] && histogram[j] != 1) {

             System.out.println("Nearest img " + c + ":" + (j + 1));
             c++;
             if (i == 0) {
             BufferedImage originalImage = ImageIO.read(new File("C:\\Users\\jinkal\\Desktop\\Dataset\\Images" + String.valueOf(j + 1) + ".JPG"));
             int type1 = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

             resizeImagePng = resizeSimilarImage(originalImage, type1);
             globalImage = new ImageIcon(resizeImagePng);
             jLabel3.setIcon(globalImage);
             jLabel3.setText("");
             } else if (i == 1) {
             BufferedImage originalImage = ImageIO.read(new File("C:\\Users\\jinkal\\Desktop\\Dataset\\Images" + String.valueOf(j + 1) + ".JPG"));
             int type1 = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

             resizeImagePng = resizeSimilarImage(originalImage, type1);
             globalImage = new ImageIcon(resizeImagePng);
             jLabel4.setIcon(globalImage);
             jLabel4.setText("");
             } else if (i == 2) {
             BufferedImage originalImage = ImageIO.read(new File("C:\\Users\\jinkal\\Desktop\\Dataset\\Images" + String.valueOf(j + 1) + ".JPG"));
             int type1 = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

             resizeImagePng = resizeSimilarImage(originalImage, type1);
             globalImage = new ImageIcon(resizeImagePng);
             jLabel5.setIcon(globalImage);
             jLabel5.setText("");
             } else if (i == 3) {
             BufferedImage originalImage = ImageIO.read(new File("C:\\Users\\jinkal\\Desktop\\Dataset\\Images" + String.valueOf(j + 1) + ".JPG"));
             int type1 = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

             resizeImagePng = resizeSimilarImage(originalImage, type1);
             globalImage = new ImageIcon(resizeImagePng);
             jLabel6.setIcon(globalImage);
             jLabel6.setText("");
             } else if (i == 4) {
             BufferedImage originalImage = ImageIO.read(new File("C:\\Users\\jinkal\\Desktop\\Dataset\\Images" + String.valueOf(j + 1) + ".JPG"));
             int type1 = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();

             resizeImagePng = resizeSimilarImage(originalImage, type1);
             globalImage = new ImageIcon(resizeImagePng);
             jLabel7.setIcon(globalImage);
             jLabel7.setText("");
             }

             //set hist entry to 1
             histogram[j] = 1;
             break;
             }
             }
             }*/
        } catch (Exception e) {
            System.out.print("Exception caught" + e.toString());
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(query_image1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(query_image1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(query_image1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(query_image1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new query_image1().setVisible(true);
            }
        });
    }

    public int Width;
    public int Height;
    public ImageIcon globalImage;
    public BufferedImage resizeImagePng;
    public BufferedImage resizeImagePngGray;
    public BufferedImage originalImage;
    public BufferedImage displayImage;
    public BufferedWriter bw;

    private static final int IMG_WIDTH = 102;
    private static final int IMG_HEIGHT = 102;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private static class IconImage extends ImageIcon {

        public IconImage(BufferedImage bi) {
        }
    }

    private static class IOExpection {

        public IOExpection() {
        }
    }
}
